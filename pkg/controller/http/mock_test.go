// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package http_test

import (
	"context"
	"github.com/secmon-lab/warren/pkg/domain/model/alert"
	slack_model "github.com/secmon-lab/warren/pkg/domain/model/slack"
	"github.com/secmon-lab/warren/pkg/domain/types"
	"sync"
)

// UseCaseMock is a mock implementation of http.UseCase.
//
//	func TestSomethingThatUsesUseCase(t *testing.T) {
//
//		// make and configure a mocked http.UseCase
//		mockedUseCase := &UseCaseMock{
//			GetUserIconFunc: func(ctx context.Context, userID string) ([]byte, string, error) {
//				panic("mock out the GetUserIcon method")
//			},
//			GetUserProfileFunc: func(ctx context.Context, userID string) (string, error) {
//				panic("mock out the GetUserProfile method")
//			},
//			HandleAlertFunc: func(ctx context.Context, schema types.AlertSchema, alertData any) ([]*alert.Alert, error) {
//				panic("mock out the HandleAlert method")
//			},
//			HandleSalvageRefreshFunc: func(ctx context.Context, user slack_model.User, metadata string, values slack_model.StateValue, viewID string) error {
//				panic("mock out the HandleSalvageRefresh method")
//			},
//			HandleSlackAppMentionFunc: func(ctx context.Context, slackMsg slack_model.Message) error {
//				panic("mock out the HandleSlackAppMention method")
//			},
//			HandleSlackInteractionBlockActionsFunc: func(ctx context.Context, user slack_model.User, slackThread slack_model.Thread, actionID slack_model.ActionID, value string, triggerID string) error {
//				panic("mock out the HandleSlackInteractionBlockActions method")
//			},
//			HandleSlackInteractionViewSubmissionFunc: func(ctx context.Context, user slack_model.User, callbackID slack_model.CallbackID, metadata string, values slack_model.StateValue) error {
//				panic("mock out the HandleSlackInteractionViewSubmission method")
//			},
//			HandleSlackMessageFunc: func(ctx context.Context, slackMsg slack_model.Message) error {
//				panic("mock out the HandleSlackMessage method")
//			},
//		}
//
//		// use mockedUseCase in code that requires http.UseCase
//		// and then make assertions.
//
//	}
type UseCaseMock struct {
	// GetUserIconFunc mocks the GetUserIcon method.
	GetUserIconFunc func(ctx context.Context, userID string) ([]byte, string, error)

	// GetUserProfileFunc mocks the GetUserProfile method.
	GetUserProfileFunc func(ctx context.Context, userID string) (string, error)

	// HandleAlertFunc mocks the HandleAlert method.
	HandleAlertFunc func(ctx context.Context, schema types.AlertSchema, alertData any) ([]*alert.Alert, error)

	// HandleSalvageRefreshFunc mocks the HandleSalvageRefresh method.
	HandleSalvageRefreshFunc func(ctx context.Context, user slack_model.User, metadata string, values slack_model.StateValue, viewID string) error

	// HandleSlackAppMentionFunc mocks the HandleSlackAppMention method.
	HandleSlackAppMentionFunc func(ctx context.Context, slackMsg slack_model.Message) error

	// HandleSlackInteractionBlockActionsFunc mocks the HandleSlackInteractionBlockActions method.
	HandleSlackInteractionBlockActionsFunc func(ctx context.Context, user slack_model.User, slackThread slack_model.Thread, actionID slack_model.ActionID, value string, triggerID string) error

	// HandleSlackInteractionViewSubmissionFunc mocks the HandleSlackInteractionViewSubmission method.
	HandleSlackInteractionViewSubmissionFunc func(ctx context.Context, user slack_model.User, callbackID slack_model.CallbackID, metadata string, values slack_model.StateValue) error

	// HandleSlackMessageFunc mocks the HandleSlackMessage method.
	HandleSlackMessageFunc func(ctx context.Context, slackMsg slack_model.Message) error

	// calls tracks calls to the methods.
	calls struct {
		// GetUserIcon holds details about calls to the GetUserIcon method.
		GetUserIcon []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
		// GetUserProfile holds details about calls to the GetUserProfile method.
		GetUserProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
		// HandleAlert holds details about calls to the HandleAlert method.
		HandleAlert []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Schema is the schema argument value.
			Schema types.AlertSchema
			// AlertData is the alertData argument value.
			AlertData any
		}
		// HandleSalvageRefresh holds details about calls to the HandleSalvageRefresh method.
		HandleSalvageRefresh []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User slack_model.User
			// Metadata is the metadata argument value.
			Metadata string
			// Values is the values argument value.
			Values slack_model.StateValue
			// ViewID is the viewID argument value.
			ViewID string
		}
		// HandleSlackAppMention holds details about calls to the HandleSlackAppMention method.
		HandleSlackAppMention []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SlackMsg is the slackMsg argument value.
			SlackMsg slack_model.Message
		}
		// HandleSlackInteractionBlockActions holds details about calls to the HandleSlackInteractionBlockActions method.
		HandleSlackInteractionBlockActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User slack_model.User
			// SlackThread is the slackThread argument value.
			SlackThread slack_model.Thread
			// ActionID is the actionID argument value.
			ActionID slack_model.ActionID
			// Value is the value argument value.
			Value string
			// TriggerID is the triggerID argument value.
			TriggerID string
		}
		// HandleSlackInteractionViewSubmission holds details about calls to the HandleSlackInteractionViewSubmission method.
		HandleSlackInteractionViewSubmission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User slack_model.User
			// CallbackID is the callbackID argument value.
			CallbackID slack_model.CallbackID
			// Metadata is the metadata argument value.
			Metadata string
			// Values is the values argument value.
			Values slack_model.StateValue
		}
		// HandleSlackMessage holds details about calls to the HandleSlackMessage method.
		HandleSlackMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SlackMsg is the slackMsg argument value.
			SlackMsg slack_model.Message
		}
	}
	lockGetUserIcon                          sync.RWMutex
	lockGetUserProfile                       sync.RWMutex
	lockHandleAlert                          sync.RWMutex
	lockHandleSalvageRefresh                 sync.RWMutex
	lockHandleSlackAppMention                sync.RWMutex
	lockHandleSlackInteractionBlockActions   sync.RWMutex
	lockHandleSlackInteractionViewSubmission sync.RWMutex
	lockHandleSlackMessage                   sync.RWMutex
}

// GetUserIcon calls GetUserIconFunc.
func (mock *UseCaseMock) GetUserIcon(ctx context.Context, userID string) ([]byte, string, error) {
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetUserIcon.Lock()
	mock.calls.GetUserIcon = append(mock.calls.GetUserIcon, callInfo)
	mock.lockGetUserIcon.Unlock()
	if mock.GetUserIconFunc == nil {
		var (
			bytesOut []byte
			sOut     string
			errOut   error
		)
		return bytesOut, sOut, errOut
	}
	return mock.GetUserIconFunc(ctx, userID)
}

// GetUserIconCalls gets all the calls that were made to GetUserIcon.
// Check the length with:
//
//	len(mockedUseCase.GetUserIconCalls())
func (mock *UseCaseMock) GetUserIconCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockGetUserIcon.RLock()
	calls = mock.calls.GetUserIcon
	mock.lockGetUserIcon.RUnlock()
	return calls
}

// GetUserProfile calls GetUserProfileFunc.
func (mock *UseCaseMock) GetUserProfile(ctx context.Context, userID string) (string, error) {
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetUserProfile.Lock()
	mock.calls.GetUserProfile = append(mock.calls.GetUserProfile, callInfo)
	mock.lockGetUserProfile.Unlock()
	if mock.GetUserProfileFunc == nil {
		var (
			sOut   string
			errOut error
		)
		return sOut, errOut
	}
	return mock.GetUserProfileFunc(ctx, userID)
}

// GetUserProfileCalls gets all the calls that were made to GetUserProfile.
// Check the length with:
//
//	len(mockedUseCase.GetUserProfileCalls())
func (mock *UseCaseMock) GetUserProfileCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockGetUserProfile.RLock()
	calls = mock.calls.GetUserProfile
	mock.lockGetUserProfile.RUnlock()
	return calls
}

// HandleAlert calls HandleAlertFunc.
func (mock *UseCaseMock) HandleAlert(ctx context.Context, schema types.AlertSchema, alertData any) ([]*alert.Alert, error) {
	callInfo := struct {
		Ctx       context.Context
		Schema    types.AlertSchema
		AlertData any
	}{
		Ctx:       ctx,
		Schema:    schema,
		AlertData: alertData,
	}
	mock.lockHandleAlert.Lock()
	mock.calls.HandleAlert = append(mock.calls.HandleAlert, callInfo)
	mock.lockHandleAlert.Unlock()
	if mock.HandleAlertFunc == nil {
		var (
			alertsOut []*alert.Alert
			errOut    error
		)
		return alertsOut, errOut
	}
	return mock.HandleAlertFunc(ctx, schema, alertData)
}

// HandleAlertCalls gets all the calls that were made to HandleAlert.
// Check the length with:
//
//	len(mockedUseCase.HandleAlertCalls())
func (mock *UseCaseMock) HandleAlertCalls() []struct {
	Ctx       context.Context
	Schema    types.AlertSchema
	AlertData any
} {
	var calls []struct {
		Ctx       context.Context
		Schema    types.AlertSchema
		AlertData any
	}
	mock.lockHandleAlert.RLock()
	calls = mock.calls.HandleAlert
	mock.lockHandleAlert.RUnlock()
	return calls
}

// HandleSalvageRefresh calls HandleSalvageRefreshFunc.
func (mock *UseCaseMock) HandleSalvageRefresh(ctx context.Context, user slack_model.User, metadata string, values slack_model.StateValue, viewID string) error {
	callInfo := struct {
		Ctx      context.Context
		User     slack_model.User
		Metadata string
		Values   slack_model.StateValue
		ViewID   string
	}{
		Ctx:      ctx,
		User:     user,
		Metadata: metadata,
		Values:   values,
		ViewID:   viewID,
	}
	mock.lockHandleSalvageRefresh.Lock()
	mock.calls.HandleSalvageRefresh = append(mock.calls.HandleSalvageRefresh, callInfo)
	mock.lockHandleSalvageRefresh.Unlock()
	if mock.HandleSalvageRefreshFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.HandleSalvageRefreshFunc(ctx, user, metadata, values, viewID)
}

// HandleSalvageRefreshCalls gets all the calls that were made to HandleSalvageRefresh.
// Check the length with:
//
//	len(mockedUseCase.HandleSalvageRefreshCalls())
func (mock *UseCaseMock) HandleSalvageRefreshCalls() []struct {
	Ctx      context.Context
	User     slack_model.User
	Metadata string
	Values   slack_model.StateValue
	ViewID   string
} {
	var calls []struct {
		Ctx      context.Context
		User     slack_model.User
		Metadata string
		Values   slack_model.StateValue
		ViewID   string
	}
	mock.lockHandleSalvageRefresh.RLock()
	calls = mock.calls.HandleSalvageRefresh
	mock.lockHandleSalvageRefresh.RUnlock()
	return calls
}

// HandleSlackAppMention calls HandleSlackAppMentionFunc.
func (mock *UseCaseMock) HandleSlackAppMention(ctx context.Context, slackMsg slack_model.Message) error {
	callInfo := struct {
		Ctx      context.Context
		SlackMsg slack_model.Message
	}{
		Ctx:      ctx,
		SlackMsg: slackMsg,
	}
	mock.lockHandleSlackAppMention.Lock()
	mock.calls.HandleSlackAppMention = append(mock.calls.HandleSlackAppMention, callInfo)
	mock.lockHandleSlackAppMention.Unlock()
	if mock.HandleSlackAppMentionFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.HandleSlackAppMentionFunc(ctx, slackMsg)
}

// HandleSlackAppMentionCalls gets all the calls that were made to HandleSlackAppMention.
// Check the length with:
//
//	len(mockedUseCase.HandleSlackAppMentionCalls())
func (mock *UseCaseMock) HandleSlackAppMentionCalls() []struct {
	Ctx      context.Context
	SlackMsg slack_model.Message
} {
	var calls []struct {
		Ctx      context.Context
		SlackMsg slack_model.Message
	}
	mock.lockHandleSlackAppMention.RLock()
	calls = mock.calls.HandleSlackAppMention
	mock.lockHandleSlackAppMention.RUnlock()
	return calls
}

// HandleSlackInteractionBlockActions calls HandleSlackInteractionBlockActionsFunc.
func (mock *UseCaseMock) HandleSlackInteractionBlockActions(ctx context.Context, user slack_model.User, slackThread slack_model.Thread, actionID slack_model.ActionID, value string, triggerID string) error {
	callInfo := struct {
		Ctx         context.Context
		User        slack_model.User
		SlackThread slack_model.Thread
		ActionID    slack_model.ActionID
		Value       string
		TriggerID   string
	}{
		Ctx:         ctx,
		User:        user,
		SlackThread: slackThread,
		ActionID:    actionID,
		Value:       value,
		TriggerID:   triggerID,
	}
	mock.lockHandleSlackInteractionBlockActions.Lock()
	mock.calls.HandleSlackInteractionBlockActions = append(mock.calls.HandleSlackInteractionBlockActions, callInfo)
	mock.lockHandleSlackInteractionBlockActions.Unlock()
	if mock.HandleSlackInteractionBlockActionsFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.HandleSlackInteractionBlockActionsFunc(ctx, user, slackThread, actionID, value, triggerID)
}

// HandleSlackInteractionBlockActionsCalls gets all the calls that were made to HandleSlackInteractionBlockActions.
// Check the length with:
//
//	len(mockedUseCase.HandleSlackInteractionBlockActionsCalls())
func (mock *UseCaseMock) HandleSlackInteractionBlockActionsCalls() []struct {
	Ctx         context.Context
	User        slack_model.User
	SlackThread slack_model.Thread
	ActionID    slack_model.ActionID
	Value       string
	TriggerID   string
} {
	var calls []struct {
		Ctx         context.Context
		User        slack_model.User
		SlackThread slack_model.Thread
		ActionID    slack_model.ActionID
		Value       string
		TriggerID   string
	}
	mock.lockHandleSlackInteractionBlockActions.RLock()
	calls = mock.calls.HandleSlackInteractionBlockActions
	mock.lockHandleSlackInteractionBlockActions.RUnlock()
	return calls
}

// HandleSlackInteractionViewSubmission calls HandleSlackInteractionViewSubmissionFunc.
func (mock *UseCaseMock) HandleSlackInteractionViewSubmission(ctx context.Context, user slack_model.User, callbackID slack_model.CallbackID, metadata string, values slack_model.StateValue) error {
	callInfo := struct {
		Ctx        context.Context
		User       slack_model.User
		CallbackID slack_model.CallbackID
		Metadata   string
		Values     slack_model.StateValue
	}{
		Ctx:        ctx,
		User:       user,
		CallbackID: callbackID,
		Metadata:   metadata,
		Values:     values,
	}
	mock.lockHandleSlackInteractionViewSubmission.Lock()
	mock.calls.HandleSlackInteractionViewSubmission = append(mock.calls.HandleSlackInteractionViewSubmission, callInfo)
	mock.lockHandleSlackInteractionViewSubmission.Unlock()
	if mock.HandleSlackInteractionViewSubmissionFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.HandleSlackInteractionViewSubmissionFunc(ctx, user, callbackID, metadata, values)
}

// HandleSlackInteractionViewSubmissionCalls gets all the calls that were made to HandleSlackInteractionViewSubmission.
// Check the length with:
//
//	len(mockedUseCase.HandleSlackInteractionViewSubmissionCalls())
func (mock *UseCaseMock) HandleSlackInteractionViewSubmissionCalls() []struct {
	Ctx        context.Context
	User       slack_model.User
	CallbackID slack_model.CallbackID
	Metadata   string
	Values     slack_model.StateValue
} {
	var calls []struct {
		Ctx        context.Context
		User       slack_model.User
		CallbackID slack_model.CallbackID
		Metadata   string
		Values     slack_model.StateValue
	}
	mock.lockHandleSlackInteractionViewSubmission.RLock()
	calls = mock.calls.HandleSlackInteractionViewSubmission
	mock.lockHandleSlackInteractionViewSubmission.RUnlock()
	return calls
}

// HandleSlackMessage calls HandleSlackMessageFunc.
func (mock *UseCaseMock) HandleSlackMessage(ctx context.Context, slackMsg slack_model.Message) error {
	callInfo := struct {
		Ctx      context.Context
		SlackMsg slack_model.Message
	}{
		Ctx:      ctx,
		SlackMsg: slackMsg,
	}
	mock.lockHandleSlackMessage.Lock()
	mock.calls.HandleSlackMessage = append(mock.calls.HandleSlackMessage, callInfo)
	mock.lockHandleSlackMessage.Unlock()
	if mock.HandleSlackMessageFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.HandleSlackMessageFunc(ctx, slackMsg)
}

// HandleSlackMessageCalls gets all the calls that were made to HandleSlackMessage.
// Check the length with:
//
//	len(mockedUseCase.HandleSlackMessageCalls())
func (mock *UseCaseMock) HandleSlackMessageCalls() []struct {
	Ctx      context.Context
	SlackMsg slack_model.Message
} {
	var calls []struct {
		Ctx      context.Context
		SlackMsg slack_model.Message
	}
	mock.lockHandleSlackMessage.RLock()
	calls = mock.calls.HandleSlackMessage
	mock.lockHandleSlackMessage.RUnlock()
	return calls
}
