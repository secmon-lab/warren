// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecase

import (
	"context"
	"github.com/secmon-lab/warren/pkg/domain/model/alert"
	"github.com/secmon-lab/warren/pkg/domain/model/slack"
	"github.com/secmon-lab/warren/pkg/domain/types"
	"sync"
)

// SlackEventMock is a mock implementation of SlackEvent.
//
//	func TestSomethingThatUsesSlackEvent(t *testing.T) {
//
//		// make and configure a mocked SlackEvent
//		mockedSlackEvent := &SlackEventMock{
//			HandleSlackAppMentionFunc: func(ctx context.Context, slackMsg slack.Message) error {
//				panic("mock out the HandleSlackAppMention method")
//			},
//			HandleSlackMessageFunc: func(ctx context.Context, slackMsg slack.Message) error {
//				panic("mock out the HandleSlackMessage method")
//			},
//		}
//
//		// use mockedSlackEvent in code that requires SlackEvent
//		// and then make assertions.
//
//	}
type SlackEventMock struct {
	// HandleSlackAppMentionFunc mocks the HandleSlackAppMention method.
	HandleSlackAppMentionFunc func(ctx context.Context, slackMsg slack.Message) error

	// HandleSlackMessageFunc mocks the HandleSlackMessage method.
	HandleSlackMessageFunc func(ctx context.Context, slackMsg slack.Message) error

	// calls tracks calls to the methods.
	calls struct {
		// HandleSlackAppMention holds details about calls to the HandleSlackAppMention method.
		HandleSlackAppMention []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SlackMsg is the slackMsg argument value.
			SlackMsg slack.Message
		}
		// HandleSlackMessage holds details about calls to the HandleSlackMessage method.
		HandleSlackMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SlackMsg is the slackMsg argument value.
			SlackMsg slack.Message
		}
	}
	lockHandleSlackAppMention sync.RWMutex
	lockHandleSlackMessage    sync.RWMutex
}

// HandleSlackAppMention calls HandleSlackAppMentionFunc.
func (mock *SlackEventMock) HandleSlackAppMention(ctx context.Context, slackMsg slack.Message) error {
	callInfo := struct {
		Ctx      context.Context
		SlackMsg slack.Message
	}{
		Ctx:      ctx,
		SlackMsg: slackMsg,
	}
	mock.lockHandleSlackAppMention.Lock()
	mock.calls.HandleSlackAppMention = append(mock.calls.HandleSlackAppMention, callInfo)
	mock.lockHandleSlackAppMention.Unlock()
	if mock.HandleSlackAppMentionFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.HandleSlackAppMentionFunc(ctx, slackMsg)
}

// HandleSlackAppMentionCalls gets all the calls that were made to HandleSlackAppMention.
// Check the length with:
//
//	len(mockedSlackEvent.HandleSlackAppMentionCalls())
func (mock *SlackEventMock) HandleSlackAppMentionCalls() []struct {
	Ctx      context.Context
	SlackMsg slack.Message
} {
	var calls []struct {
		Ctx      context.Context
		SlackMsg slack.Message
	}
	mock.lockHandleSlackAppMention.RLock()
	calls = mock.calls.HandleSlackAppMention
	mock.lockHandleSlackAppMention.RUnlock()
	return calls
}

// HandleSlackMessage calls HandleSlackMessageFunc.
func (mock *SlackEventMock) HandleSlackMessage(ctx context.Context, slackMsg slack.Message) error {
	callInfo := struct {
		Ctx      context.Context
		SlackMsg slack.Message
	}{
		Ctx:      ctx,
		SlackMsg: slackMsg,
	}
	mock.lockHandleSlackMessage.Lock()
	mock.calls.HandleSlackMessage = append(mock.calls.HandleSlackMessage, callInfo)
	mock.lockHandleSlackMessage.Unlock()
	if mock.HandleSlackMessageFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.HandleSlackMessageFunc(ctx, slackMsg)
}

// HandleSlackMessageCalls gets all the calls that were made to HandleSlackMessage.
// Check the length with:
//
//	len(mockedSlackEvent.HandleSlackMessageCalls())
func (mock *SlackEventMock) HandleSlackMessageCalls() []struct {
	Ctx      context.Context
	SlackMsg slack.Message
} {
	var calls []struct {
		Ctx      context.Context
		SlackMsg slack.Message
	}
	mock.lockHandleSlackMessage.RLock()
	calls = mock.calls.HandleSlackMessage
	mock.lockHandleSlackMessage.RUnlock()
	return calls
}

// SlackInteractionMock is a mock implementation of SlackInteraction.
//
//	func TestSomethingThatUsesSlackInteraction(t *testing.T) {
//
//		// make and configure a mocked SlackInteraction
//		mockedSlackInteraction := &SlackInteractionMock{
//			HandleSlackInteractionBlockActionsFunc: func(ctx context.Context, user slack.User, slackThread slack.Thread, actionID slack.ActionID, value string, triggerID string) error {
//				panic("mock out the HandleSlackInteractionBlockActions method")
//			},
//			HandleSlackInteractionViewSubmissionFunc: func(ctx context.Context, user slack.User, callbackID slack.CallbackID, metadata string, values slack.StateValue) error {
//				panic("mock out the HandleSlackInteractionViewSubmission method")
//			},
//		}
//
//		// use mockedSlackInteraction in code that requires SlackInteraction
//		// and then make assertions.
//
//	}
type SlackInteractionMock struct {
	// HandleSlackInteractionBlockActionsFunc mocks the HandleSlackInteractionBlockActions method.
	HandleSlackInteractionBlockActionsFunc func(ctx context.Context, user slack.User, slackThread slack.Thread, actionID slack.ActionID, value string, triggerID string) error

	// HandleSlackInteractionViewSubmissionFunc mocks the HandleSlackInteractionViewSubmission method.
	HandleSlackInteractionViewSubmissionFunc func(ctx context.Context, user slack.User, callbackID slack.CallbackID, metadata string, values slack.StateValue) error

	// calls tracks calls to the methods.
	calls struct {
		// HandleSlackInteractionBlockActions holds details about calls to the HandleSlackInteractionBlockActions method.
		HandleSlackInteractionBlockActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User slack.User
			// SlackThread is the slackThread argument value.
			SlackThread slack.Thread
			// ActionID is the actionID argument value.
			ActionID slack.ActionID
			// Value is the value argument value.
			Value string
			// TriggerID is the triggerID argument value.
			TriggerID string
		}
		// HandleSlackInteractionViewSubmission holds details about calls to the HandleSlackInteractionViewSubmission method.
		HandleSlackInteractionViewSubmission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User slack.User
			// CallbackID is the callbackID argument value.
			CallbackID slack.CallbackID
			// Metadata is the metadata argument value.
			Metadata string
			// Values is the values argument value.
			Values slack.StateValue
		}
	}
	lockHandleSlackInteractionBlockActions   sync.RWMutex
	lockHandleSlackInteractionViewSubmission sync.RWMutex
}

// HandleSlackInteractionBlockActions calls HandleSlackInteractionBlockActionsFunc.
func (mock *SlackInteractionMock) HandleSlackInteractionBlockActions(ctx context.Context, user slack.User, slackThread slack.Thread, actionID slack.ActionID, value string, triggerID string) error {
	callInfo := struct {
		Ctx         context.Context
		User        slack.User
		SlackThread slack.Thread
		ActionID    slack.ActionID
		Value       string
		TriggerID   string
	}{
		Ctx:         ctx,
		User:        user,
		SlackThread: slackThread,
		ActionID:    actionID,
		Value:       value,
		TriggerID:   triggerID,
	}
	mock.lockHandleSlackInteractionBlockActions.Lock()
	mock.calls.HandleSlackInteractionBlockActions = append(mock.calls.HandleSlackInteractionBlockActions, callInfo)
	mock.lockHandleSlackInteractionBlockActions.Unlock()
	if mock.HandleSlackInteractionBlockActionsFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.HandleSlackInteractionBlockActionsFunc(ctx, user, slackThread, actionID, value, triggerID)
}

// HandleSlackInteractionBlockActionsCalls gets all the calls that were made to HandleSlackInteractionBlockActions.
// Check the length with:
//
//	len(mockedSlackInteraction.HandleSlackInteractionBlockActionsCalls())
func (mock *SlackInteractionMock) HandleSlackInteractionBlockActionsCalls() []struct {
	Ctx         context.Context
	User        slack.User
	SlackThread slack.Thread
	ActionID    slack.ActionID
	Value       string
	TriggerID   string
} {
	var calls []struct {
		Ctx         context.Context
		User        slack.User
		SlackThread slack.Thread
		ActionID    slack.ActionID
		Value       string
		TriggerID   string
	}
	mock.lockHandleSlackInteractionBlockActions.RLock()
	calls = mock.calls.HandleSlackInteractionBlockActions
	mock.lockHandleSlackInteractionBlockActions.RUnlock()
	return calls
}

// HandleSlackInteractionViewSubmission calls HandleSlackInteractionViewSubmissionFunc.
func (mock *SlackInteractionMock) HandleSlackInteractionViewSubmission(ctx context.Context, user slack.User, callbackID slack.CallbackID, metadata string, values slack.StateValue) error {
	callInfo := struct {
		Ctx        context.Context
		User       slack.User
		CallbackID slack.CallbackID
		Metadata   string
		Values     slack.StateValue
	}{
		Ctx:        ctx,
		User:       user,
		CallbackID: callbackID,
		Metadata:   metadata,
		Values:     values,
	}
	mock.lockHandleSlackInteractionViewSubmission.Lock()
	mock.calls.HandleSlackInteractionViewSubmission = append(mock.calls.HandleSlackInteractionViewSubmission, callInfo)
	mock.lockHandleSlackInteractionViewSubmission.Unlock()
	if mock.HandleSlackInteractionViewSubmissionFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.HandleSlackInteractionViewSubmissionFunc(ctx, user, callbackID, metadata, values)
}

// HandleSlackInteractionViewSubmissionCalls gets all the calls that were made to HandleSlackInteractionViewSubmission.
// Check the length with:
//
//	len(mockedSlackInteraction.HandleSlackInteractionViewSubmissionCalls())
func (mock *SlackInteractionMock) HandleSlackInteractionViewSubmissionCalls() []struct {
	Ctx        context.Context
	User       slack.User
	CallbackID slack.CallbackID
	Metadata   string
	Values     slack.StateValue
} {
	var calls []struct {
		Ctx        context.Context
		User       slack.User
		CallbackID slack.CallbackID
		Metadata   string
		Values     slack.StateValue
	}
	mock.lockHandleSlackInteractionViewSubmission.RLock()
	calls = mock.calls.HandleSlackInteractionViewSubmission
	mock.lockHandleSlackInteractionViewSubmission.RUnlock()
	return calls
}

// AlertMock is a mock implementation of Alert.
//
//	func TestSomethingThatUsesAlert(t *testing.T) {
//
//		// make and configure a mocked Alert
//		mockedAlert := &AlertMock{
//			HandleAlertWithAuthFunc: func(ctx context.Context, schema types.AlertSchema, alertData any) ([]*alert.Alert, error) {
//				panic("mock out the HandleAlertWithAuth method")
//			},
//		}
//
//		// use mockedAlert in code that requires Alert
//		// and then make assertions.
//
//	}
type AlertMock struct {
	// HandleAlertWithAuthFunc mocks the HandleAlertWithAuth method.
	HandleAlertWithAuthFunc func(ctx context.Context, schema types.AlertSchema, alertData any) ([]*alert.Alert, error)

	// calls tracks calls to the methods.
	calls struct {
		// HandleAlertWithAuth holds details about calls to the HandleAlertWithAuth method.
		HandleAlertWithAuth []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Schema is the schema argument value.
			Schema types.AlertSchema
			// AlertData is the alertData argument value.
			AlertData any
		}
	}
	lockHandleAlertWithAuth sync.RWMutex
}

// HandleAlertWithAuth calls HandleAlertWithAuthFunc.
func (mock *AlertMock) HandleAlertWithAuth(ctx context.Context, schema types.AlertSchema, alertData any) ([]*alert.Alert, error) {
	callInfo := struct {
		Ctx       context.Context
		Schema    types.AlertSchema
		AlertData any
	}{
		Ctx:       ctx,
		Schema:    schema,
		AlertData: alertData,
	}
	mock.lockHandleAlertWithAuth.Lock()
	mock.calls.HandleAlertWithAuth = append(mock.calls.HandleAlertWithAuth, callInfo)
	mock.lockHandleAlertWithAuth.Unlock()
	if mock.HandleAlertWithAuthFunc == nil {
		var (
			alertsOut []*alert.Alert
			errOut    error
		)
		return alertsOut, errOut
	}
	return mock.HandleAlertWithAuthFunc(ctx, schema, alertData)
}

// HandleAlertWithAuthCalls gets all the calls that were made to HandleAlertWithAuth.
// Check the length with:
//
//	len(mockedAlert.HandleAlertWithAuthCalls())
func (mock *AlertMock) HandleAlertWithAuthCalls() []struct {
	Ctx       context.Context
	Schema    types.AlertSchema
	AlertData any
} {
	var calls []struct {
		Ctx       context.Context
		Schema    types.AlertSchema
		AlertData any
	}
	mock.lockHandleAlertWithAuth.RLock()
	calls = mock.calls.HandleAlertWithAuth
	mock.lockHandleAlertWithAuth.RUnlock()
	return calls
}
